# tox
# -----------------------------------------------------------------------------
[tox]
skipsdist = True
envlist =
    py37,
    py38,
    lint,

[testenv:py37]
skip_install = True
deps =
    -r requirements.txt
    -r requirements_tests.txt
whitelist_externals = python
commands =
    python --version
    pip --version
    pip list
    python app/manage.py migrate
    python app/manage.py test app

[testenv:py38]
skip_install = True
deps =
    -r requirements.txt
    -r requirements_tests.txt
whitelist_externals = python
commands =
    python --version
    pip --version
    pip list
    python app/manage.py migrate
    python app/manage.py test app

[testenv:lint]
skip_install = True
description = "test-lint"
deps =
    -r requirements.txt
    -r requirements_tests.txt
whitelist_externals = python
commands =
    {[testenv:pycodestyle]commands}
    {[testenv:flake8]commands}
    {[testenv:mypy]commands}
    {[testenv:pylint]commands}

[testenv:pycodestyle]
skip_install = True
description = "test-pycodestyle"
deps =
    -r requirements.txt
    -r requirements_tests.txt
whitelist_externals = python
commands =
    pycodestyle --version
    pycodestyle --config=tox.ini app

[testenv:flake8]
skip_install = True
description = "test-flake8"
deps =
    -r requirements.txt
    -r requirements_tests.txt
whitelist_externals = python
commands =
    flake8 --version
    flake8 --config=tox.ini app

[testenv:mypy]
skip_install = True
description = "test-mypy"
deps =
    -r requirements.txt
    -r requirements_tests.txt
whitelist_externals = python
commands =
    mypy --version
    mypy --config-file=tox.ini -p app

[testenv:pylint]
skip_install = True
description = "test-pylint"
deps =
    -r requirements.txt
    -r requirements_tests.txt
whitelist_externals = python
commands =
    pylint --version
    pylint --rcfile=tox.ini app

# pycodestyle
# -----------------------------------------------------------------------------
[pycodestyle]
max-line-length = 79
max-doc-length = 78
show-source = 1
show-pep8 = 1
verbose = 1
statistics = 1

# flake8
# -----------------------------------------------------------------------------
[flake8]
max-complexity = 10
max-line-length = 79
max-doc-length = 78
doctests = 1
show-source = 1
statistics = 1
exclude =
    */migrations/*
    */settings/*
    */settings.py
ignore =
    # nothing to ignore

# mypy
# -----------------------------------------------------------------------------
[mypy]
plugins =
    mypy_django_plugin.main

[mypy.plugins.django-stubs]
django_settings_module = app.settings

[mypy-debug_toolbar]
ignore_missing_imports = True


# pylint
# -----------------------------------------------------------------------------
[MASTER]
persistent=yes
ignore=settings,migrations,tests
cache-size=500


[MESSAGES CONTROL]
# I0011(locally-disabled)
# C0111(missing-docstring)
# C0103(invalid-name)
disable=I0011,C0111,C0103

# W0611(unused-import)
# W0612(unused-variable)
enable=W0611,W0612


[REPORTS]
msg-template={abspath}:{line}:{column} [{msg_id}({symbol}), {obj}] {msg}
reports=n


[BASIC]
# Regular expression which should only match functions or classes name which do
# not require a docstring
no-docstring-rgx=__.*__

# Regular expression which should only match correct module names
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Regular expression which should only match correct module level names
const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$

# Regular expression which should only match correct class names
class-rgx=[A-Z_][a-zA-Z0-9]+$

# Regular expression which should only match correct function names
function-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match correct method names
method-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match correct instance attribute names
attr-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match correct argument names
argument-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match correct variable names
variable-rgx=[a-z_][a-z0-9_]{1,30}$

# Regular expression which should only match correct list comprehension /
# generator expression variable names
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$

# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,e,ex,Run,_,id

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata

# List of builtins function names that should not be used, separated by a comma
bad-functions=map,filter,apply,input


[TYPECHECK]
# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set).
ignored-classes=Request,WSGIRequest,SQLAlchemy,Model,Session,scoped_session

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E0201 when accessed.
generated-members=_meta,objects,id,pk

# List of method names used to declare (i.e. assign) instance attributes
defining-attr-methods=__init__,__new__,setUp


[VARIABLES]
# Tells whether we should check for unused import in __init__ files.
init-import=no

# A regular expression matching names used for dummy variables (i.e. not used).
dummy-variables-rgx=_|dummy|\*args|\*\*kwargs


[SIMILARITIES]
min-similarity-lines=3
ignore-imports=yes
ignore-comments=yes
ignore-docstrings=yes


[MISCELLANEOUS]
notes=FIXME,XXX,TODO


[FORMAT]
max-line-length=79
max-module-lines=512
indent-string='    '


[DESIGN]
max-args=9
max-locals=15
max-returns=3
max-branches=12
max-statements=50
max-parents=15
max-attributes=15
min-public-methods=0
max-public-methods=50


[IMPORTS CHECKER]
deprecated-modules=ipdb,pdb


# coveragerc
# -----------------------------------------------------------------------------
[run]
branch = true
parallel = true
omit =
    */tests/*
    */migrations/*
    */settings/*
    */settings.py
    */manage.py
    */wsgi.py

[report]
omit =
    */tests/*
    */migrations/*
    */settings/*
    */settings.py
    */manage.py
    */wsgi.py

# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about default import code:
    from __future__ import unicode_literals
    from __future__ import print_function
    from __future__ import absolute_import

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if abstract code example:
    @abc.abstractmethod
    @abstractmethod

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError
    raise IOError
    raise ValueError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:

show_missing = True

ignore_errors = True

[html]
directory = .coverage.html
